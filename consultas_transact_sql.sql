--TRANSACT SQL
DECLARE @TEXTO NVARCHAR(50)
DECLARE @NUMERO INT
DECLARE @FECHA DATETIME
--ASIGNAR VALORES ESTATICOS
SET @TEXTO = 'HOY ES LUNES'
SET @NUMERO = 14
--ASIGNAR VALORES MEDIANTE FUNCIONES
SET @FECHA = GETDATE()
--REPRESENTAR LOS VALORES
--1) CONSULTAS SELECT. PODRIAMOS HACER UN SELECT
--CON LAS VARIABLES Y RECUPERARLO EN CUALQUIER APP
--SELECT @TEXTO AS TEXTO, @NUMERO AS NUMERO, @FECHA AS FECHA
--2) MENSAJES DE SERVIDOR. PRINT. UN MENSAJE DE SERVIDOR
--SOLAMENTE SIRVE PARA LA BASE DE DATOS. ES UTIL CUANDO
--ESCRIBIMOS MUCHO CODIGO EN LOS PROCEDIMIENTOS PARA SEGUIR LA
--SECUENCIA. TAMBIEN PARA MOSTRAR POSIBLES MENSAJES
-- CAST(@VARIABLE AS TIPO)
PRINT @TEXTO + ', ' +  CAST(@NUMERO AS NVARCHAR) + ', ' + CAST(@FECHA AS NVARCHAR)
----------------------------------------------------------------------------------
--RECUPERAR VALO9RES A PARTIR DE CONSULTAS
--MOSTRAR LOS DATOS DEL EMPLEADO MAS ANTIGUO DE LA EMPRESA
--SELECT * FROM EMP WHERE FECHA_ALT = 
--(SELECT MIN(FECHA_ALT) FROM EMP)
--LA SOLUCION ES UTILIZAR UNA VARIABLE PARA ALMACENAR LA MINIMA
--FECHA Y UTILIZARLA EN LA CONSULTA
DECLARE @FECHAALT DATETIME
SELECT @FECHAALT = MIN(FECHA_ALT) FROM EMP
SELECT * FROM EMP WHERE FECHA_ALT = @FECHAALT

--LOS CONDICIONALES NOS PERMITEN PODER EJECUTAR MULTIUPLES
--CODIGOS O CONSULTAS
--IF(CONDICION)
--BEGIN
	--INSTRUCCIONES TRUE
--END
--ELSE IF(OTRA CONDICION)
--BEGIN
	--INSTRUCCIONES OTRA CONDICION
--END
--ELSE
--BEGIN
	--INSTRUCCIONES ELSE
--END
--PERMITE EJECUTAR CODIGOS DISTINTOS DEPENDIENDO DE VALORES
--SI UN NUMERO ES POSITIVO, EMPLEADOS, SINO, DEPARTAMENTOS
DECLARE @NUM INT = 5
IF(@NUM >=0)
BEGIN
	SELECT * FROM EMP
END
ELSE
BEGIN
	SELECT * FROM DEPT
END

--PERMITE COMPROBAR ELEMENTOS
--MOSTRAR LOS EMPLEADOS DEL DEPARTAMENTO DE VENTAS
--SI EL DEPARTAMENTO NO EXISTE, MOSTRAMOS UN MENSAJE
--SI EXISTE, MOSTRAMOS LOS EMPLEADOS
DECLARE @DEPTNO INT
SELECT @DEPTNO = DEPT_NO FROM DEPT WHERE DNOMBRE = 'BENTAS'
IF(@DEPTNO IS NULL)
BEGIN
	PRINT 'NO EXISTE EL DEPARTAMENTO'
END
ELSE
BEGIN
	SELECT * FROM EMP WHERE DEPT_NO = @DEPTNO
END

--INCREMENTAR EN 10.000 EL SALARIO DE SANCHA SI COBRA MAS DE 150.000
--SI COBRA MAS DE 250.000 BAJAR EL SUELD0 EN 2.000
DECLARE @SUELDO INT
SELECT @SUELDO = SALARIO FROM EMP WHERE APELLIDO = 'SANCHA'
IF(@SUELDO < 150000)
BEGIN
	UPDATE EMP SET SALARIO+=10000 WHERE APELLIDO = 'SANCHA'
	PRINT 'SUBIDA DE SUELDO'
END
ELSE IF(@SUELDO > 250000)
BEGIN
	UPDATE EMP SET SALARIO-=2000 WHERE APELLIDO = 'SANCHA'
	PRINT 'BAJADA DE SUELDO'
END
ELSE
BEGIN 
	PRINT 'SALARIO SIN MODIFICACIONES: ' + CAST(@SUELDO AS NVARCHAR)
END

--MODIFICAR EL SALARIO DE LA PLANTILLA DE LA PAZ.
--SI LA SUMA SALARIAL SUPERA 1 MILLON BAJAR EL SUELDO 10.000
--SI NO LA SUPERA SUBIR EL SALARIO EN 10.000
--INDICAR MEDIANTE MENSAJES LA ACCION REALIZADA
DECLARE @MASASALARIAL INT
DECLARE @HOSPITAL INT

SELECT @HOSPITAL = HOSPITAL_COD FROM HOSPITAL WHERE NOMBRE = 'La Paz'
SELECT @MASASALARIAL = SUM(CAST(SALARIO AS INT)) FROM PLANTILLA WHERE HOSPITAL_COD = @HOSPITAL

IF(@MASASALARIAL > 1000000)
BEGIN
	UPDATE PLANTILLA SET SALARIO-=10000 WHERE HOSPITAL_COD = @HOSPITAL
	PRINT 'BAJADA DE SUELDO'
END
ELSE
BEGIN
	UPDATE PLANTILLA SET SALARIO+=10000 WHERE HOSPITAL_COD = @HOSPITAL
	PRINT 'SUBIDA DE SUELDO'
END


--SINTAXIS DE BUCLES. LOS BUCLES NO SE LLEVAM BIEN CON
--NINGUNA BASE DE DATOS, EXCEPTO PARA RECORRER CURSORES
DECLARE @CONTADOR INT
SET @CONTADOR = 1
WHILE(@CONTADOR <= 10)
BEGIN
	PRINT '@CONTADOR: ' + CAST(@CONTADOR AS NVARCHAR)
	SET @CONTADOR = @CONTADOR+1
END

--LOS BUCLES NO SE UTILIZAN PARA TAREAS PROGRAMATCAS EN BBDD
DECLARE @APE NVARCHAR(50)
SELECT @APE = APELLIDO FROM EMP
PRINT @APE --RECUPERA EL ULTIMO ELEMENTO DE LA CONSULTA
--EXISTE UNA VARIABLE LLAMADA CURSOR QUE PERMITE ALMACENAR
--CONSULTAS Y, MEDIANTE BUCLES, RECORRER DICHAS CONSULTAS
--VAMOS A ALMACENAR EL APELLIDO DE LOS EMPLEADOS EN UN CURSOR
--MOSTRAR EL APELLIDO EN UN PRINT
DECLARE @APELLIDO NVARCHAR(50)
DECLARE @OFICIO NVARCHAR(50)
--1) DECLARAR UNA VARIBLE CURSOR CON LA CONSULTA
DECLARE QUERY CURSOR FOR
SELECT APELLIDO, OFICIO FROM EMP
--2) ABRIR CURSOR
OPEN QUERY
--3) ALMACENAR LOS DATOS DE LA PRIMERA FILA EN NUESTRAS VARIABLES
FETCH NEXT FROM QUERY INTO @APELLIDO, @OFICIO
--PARA SABER SI EXISTEN DATOS, EXISTE UNA VARIBLE DE SISTEMA
--@@FETCH_STATUS QUE NOS PERMITE RECORRER LOS DATOS DEL CURSOR
--SI SU VALOR ES 0, CONTIENE REGISTROS
--4) RECORRER CURSOR
WHILE (@@FETCH_STATUS = 0)
BEGIN
	--NUNCA CAMBIARA EL ESTADO DE @@FETCH_STATUS
	PRINT @APELLIDO + ', ' + @OFICIO
	FETCH NEXT FROM QUERY INTO @APELLIDO, @OFICIO
END
--5) CERRAR EL CURSOR
CLOSE QUERY
--6) LIBERAR LA MEMORIA
DEALLOCATE QUERY

--NECESITAMOS INCREMENTAR EL SALARIO DE LOS DOCTORES
--CON UN VALOR ALEATORIO HASTA 10.000
--DIBUJAMOS EL APPELLIDO Y EL NUEVO SALARIO DE CADA 
--DOCTOR DENTRO DEL CURSOR
--CADA DOCTOR TENDRA UN VALOR DISTINTO
--RAND()*10000
DECLARE @INCREMENTO INT
DECLARE @IDDOCTOR INT
DECLARE @APELLIDO NVARCHAR(50)
DECLARE @SALARIO INT
DECLARE QUERY CURSOR FOR
SELECT DOCTOR_NO, APELLIDO, SALARIO FROM DOCTOR

OPEN QUERY
FETCH NEXT FROM QUERY INTO @IDDOCTOR, @APELLIDO, @SALARIO
WHILE (@@FETCH_STATUS = 0)
BEGIN
	SET @INCREMENTO  = RAND()*10000
	UPDATE DOCTOR SET SALARIO = SALARIO + @INCREMENTO WHERE DOCTOR_NO = @IDDOCTOR
	PRINT @APELLIDO + ', ' + CAST(@SALARIO AS NVARCHAR)
	FETCH NEXT FROM QUERY INTO @APELLIDO, @SALARIO
END
CLOSE QUERY
DEALLOCATE QUERY

SELECT * FROM EMP

--NECESITAMOS MODIFICAR EL SALARIO DE LOS EMPLEADOS
--DE CADA DEPARTAMENTO
--TODO MEDIANTE UNA ÚNICA ACCIÓN
--SI LA SUMA SALARIAL DEL DEPARTAMENTO SUPERA 1M
--BAJAMOS SALARIOS 10.000
--Y SI LA SUMA SALARIAL NO SUPERA EL 1M
--SUBIMOS SALARIO 10.000
--MOSTRAR MENSAJES DE LO QUE HEMOS REALIZADO
DECLARE @IDEMP INT
DECLARE @IDDEPT INT
DECLARE @DNAME VARCHAR(20)
DECLARE @SUMA INT

DECLARE JOINEMPDEPT CURSOR FOR
SELECT SUM(SALARIO) AS MASA,DEPT.DEPT_NO, DEPT.DNOMBRE
FROM EMP INNER JOIN DEPT ON DEPT.DEPT_NO = EMP.DEPT_NO
GROUP BY DEPT.DNOMBRE, DEPT.DEPT_NO

OPEN JOINEMPDEPT
FETCH NEXT FROM JOINEMPDEPT INTO @SUMA, @IDDEPT, @DNAME

WHILE (@@FETCH_STATUS = 0)
BEGIN
	IF(@SUMA > 1000000)
		BEGIN
			UPDATE EMP SET SALARIO -= 10000 WHERE DEPT_NO = @IDDEPT
			PRINT 'Subiendo salarios a ' + @DNAME
		END
	ELSE
		BEGIN
			UPDATE EMP SET SALARIO += 10000 WHERE DEPT_NO = @IDDEPT
			PRINT 'Bajando salarios a ' + @DNAME
		END
	FETCH NEXT FROM JOINEMPDEPT INTO @SUMA, @IDDEPT, @DNAME
END
CLOSE JOINEMPDEPT
DEALLOCATE JOINEMPDEPT